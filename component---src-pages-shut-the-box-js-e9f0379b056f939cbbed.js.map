{"version":3,"sources":["webpack:///./src/components/shutTheBox.js","webpack:///./src/pages/shutTheBox.js"],"names":["ShutTheBox","useState","dice","setDice","allChoices","availableChoices","setAvailableChoices","pickingNumbers","setPickingNumbers","needsToRoll","setNeedsToRoll","Set","selectedNumbers","setSelectedNumbers","gameOver","setGameOver","winner","setWinner","useEffect","isPossible","sumArray","size","console","log","canFinalizeSelection","canSelectNumbers","handleKeypress","event","key","rollDice","newGame","toggleChoice","parseInt","finalizeSelection","window","addEventListener","removeEventListener","rollDie","choice","has","newChosenNumbers","delete","add","newAvailableChoices","forEach","number","className","style","display","flexDirection","chosenNumbers","disabled","onClick","length","Dice","JSON","stringify","map","die","i","Numbers","possibleChoices","color","Array","keys","Math","ceil","random","total","arr","reduce","a","b","valuesArray","sum","target","remainingValues","slice","splice","ShutTheBoxPage","title"],"mappings":"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","file":"component---src-pages-shut-the-box-js-e9f0379b056f939cbbed.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nfunction ShutTheBox() {\n  const [dice, setDice] = useState([]);\n  const [availableChoices, setAvailableChoices] = useState(allChoices());\n  const [pickingNumbers, setPickingNumbers] = useState(false);\n  const [needsToRoll, setNeedsToRoll] = useState(true);\n  const [selectedNumbers, setSelectedNumbers] = useState(new Set());\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(false);\n\n  useEffect(() => {\n    if (!needsToRoll && !isPossible([...availableChoices], 0, sumArray(dice))) {\n      setGameOver(true);\n      setNeedsToRoll(false);\n    }\n  }, [needsToRoll]);\n\n  useEffect(() => {\n    if (availableChoices.size === 0) {\n      console.log('gameStateAtWin',\n        \"dice\",\n        \"availableChoices\",\n        \"pickingNumbers\",\n        \"needsToRoll\",\n        \"selectedNumbers\",\n        \"gameOver\");\n      console.log('availableChoices.size is equal to zero apparently?', availableChoices.size);\n      console.log('gameStateAtWin',\n        dice,\n        availableChoices,\n        pickingNumbers,\n        needsToRoll,\n        selectedNumbers,\n        gameOver);\n\n      setGameOver(true);\n      setWinner(true);\n    }\n  }, [availableChoices.size]);\n\n  const canFinalizeSelection = pickingNumbers && canSelectNumbers(selectedNumbers, sumArray(dice));\n\n  useEffect(() => {\n    const handleKeypress = event => {\n      switch (event.key) {\n        case \"r\":\n          rollDice();\n          break;\n        case \"n\":\n          newGame();\n          break;\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\":\n          if (pickingNumbers) {\n            toggleChoice(parseInt(event.key));\n          }\n          break;\n        case \"Enter\":\n          if (canFinalizeSelection) {\n            finalizeSelection();\n          }\n          break;\n        default:\n          console.log(\"default\", event.key);\n          break;\n      }\n    };\n    window.addEventListener(\"keypress\", handleKeypress);\n    return () => window.removeEventListener(\"keypress\", handleKeypress);\n  });\n\n  const newGame = () => {\n    setDice([]);\n    setAvailableChoices(allChoices());\n    setPickingNumbers(false);\n    setSelectedNumbers(new Set());\n    setGameOver(false);\n    setNeedsToRoll(true);\n  };\n\n  const rollDice = () => {\n    if (!gameOver && needsToRoll) {\n      console.log(\"rolling\");\n      sumArray([...availableChoices]) > 6 ? setDice([rollDie(), rollDie()]) : setDice([rollDie()]);\n      setNeedsToRoll(false);\n      setPickingNumbers(true);\n    }\n  };\n\n  const toggleChoice = choice => {\n    if (!gameOver && availableChoices.has(choice)) {\n      const newChosenNumbers = new Set(selectedNumbers);\n      selectedNumbers.has(choice) ? newChosenNumbers.delete(choice) : newChosenNumbers.add(choice);\n      setSelectedNumbers(newChosenNumbers);\n    }\n  };\n\n  const finalizeSelection = () => {\n    if (!gameOver && !needsToRoll) {\n      console.log(\"finalize selection\")\n      const newAvailableChoices = new Set(availableChoices);\n      [...selectedNumbers].forEach(number => newAvailableChoices.delete(number));\n      setAvailableChoices(newAvailableChoices);\n      setSelectedNumbers(new Set());\n      setDice([]);\n      setPickingNumbers(false);\n      setNeedsToRoll(true);\n    }\n  };\n\n  return (\n    <div className=\"ShutTheBox\">\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n        <Numbers\n          availableChoices={availableChoices}\n          chosenNumbers={selectedNumbers}\n          toggleChoice={toggleChoice}\n          disabled={!pickingNumbers}\n          gameOver={gameOver}/>\n        <div>\n          <button\n            disabled={!canFinalizeSelection}\n            onClick={finalizeSelection}\n          >\n            Select these numbers\n          </button>\n        </div>\n        <div>\n          <button\n            onClick={rollDice}\n            disabled={!needsToRoll}\n          >\n            Roll\n          </button>\n        </div>\n        Dice:\n        {dice.length > 0 && <Dice dice={dice}/>}\n        {\n          gameOver ?\n            (\n              <div>\n                <div>GAME OVER</div>\n                {\n                  winner ?\n                    <div>You shut the box!!!</div>\n                    :\n                    <>\n                      <div>{JSON.stringify([...availableChoices])}</div>\n                      <div>Total <span>{sumArray([...availableChoices])}</span></div>\n                    </>\n                }\n\n                <button onClick={newGame}>Start new game</button>\n              </div>\n            )\n            : <div>{pickingNumbers ? \"Select your numbers\" : \"Roll the dice\"}</div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default ShutTheBox;\n\nfunction Dice({dice}) {\n  return (\n    <div>\n      {dice.map((die, i) => <div key={`die${i}`}>{die}</div>)}\n    </div>\n  );\n}\n\nconst Numbers = ({availableChoices, chosenNumbers, toggleChoice, disabled, gameOver}) => {\n  return (\n    <div>\n      {possibleChoices.map(choice => (\n        <button\n          key={choice}\n          disabled={disabled || !availableChoices.has(choice)}\n          style={{color: availableChoices.has(choice) && chosenNumbers.has(choice) && 'red'}}\n          onClick={() => {\n            !gameOver && toggleChoice(choice)\n          }}\n        >\n          {choice}\n        </button>\n      ))}\n    </div>\n  );\n};\nconst possibleChoices = [...Array(9).keys()].map(i => i + 1);\n\nconst rollDie = () => Math.ceil(Math.random() * 6);\n\nconst allChoices = () => new Set([...Array(9).keys()].map(i => i + 1));\n\nconst canSelectNumbers = (selectedNumbers, total) => (\n  sumArray([...selectedNumbers]) === total\n);\n\nconst sumArray = (arr) => arr.reduce((a, b) => a + b, 0);\n\nconst isPossible = (valuesArray, sum, target) => {\n  if (sum === target) {\n    return true;\n  }\n  if (sum > target) {\n    return false;\n  }\n  for (let i = 0; i < valuesArray.length; i++) {\n    let remainingValues = valuesArray.slice(0); // copy\n    remainingValues.splice(i, 1);\n    // console.log(\"depth\")\n    if (isPossible(remainingValues, sum + valuesArray[i], target)) {\n      // console.log(\"remainingValues\", \"valuesArray[i]\", \"target\")\n      // console.log(remainingValues, valuesArray[i], target)\n      return true;\n    }\n  }\n  return false;\n};","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ShutTheBox from \"../components/shutTheBox\";\n\nconst ShutTheBoxPage = () => (\n  <Layout>\n    <SEO title=\"Dan Dzoan - Shut The Box\" />\n    <ShutTheBox />\n  </Layout>\n);\n\nexport default ShutTheBoxPage\n"],"sourceRoot":""}